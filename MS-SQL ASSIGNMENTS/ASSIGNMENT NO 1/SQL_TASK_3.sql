USE TechShop;

--Task 3: Aggregate Functions, HAVING, ORDER BY, GROUP BY, and Joins

--1.List all orders along with customer information**

SELECT O.OrderID, O.OrderDate, O.TotalAmount, 
       C.FirstName, C.LastName, C.Email, C.Phone
FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID;

--2.Find total revenue generated by each product**

SELECT P.ProductName, SUM(O.TotalAmount) AS TotalRevenue
FROM OrderDetails OD
JOIN Orders O ON OD.OrderID = O.OrderID
JOIN Products P ON OD.ProductID = P.ProductID
GROUP BY P.ProductName;

--3.List customers who made at least one purchase**

SELECT DISTINCT C.CustomerID, C.FirstName, C.LastName, C.Email, C.Phone
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID;

--4.Find the most popular product (highest total quantity ordered)**

SELECT TOP 1 P.ProductName, SUM(OD.Quantity) AS TotalOrdered
FROM OrderDetails OD
JOIN Products P ON OD.ProductID = P.ProductID
GROUP BY P.ProductName
ORDER BY TotalOrdered DESC;

-- CREATING A CATEGORIES TABLE
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY IDENTITY(1,1),
    CategoryName VARCHAR(100) UNIQUE NOT NULL
);

--Modify Product table 
ALTER TABLE Products 
ADD CategoryID INT;

ALTER TABLE Products 
ADD CONSTRAINT FK_Products_Categories 
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID) ON DELETE CASCADE;

--INSERTING VALUES

-- Insert Categories
INSERT INTO Categories (CategoryName) VALUES 
('Laptops'), 
('Smartphones'), 
('Tablets'), 
('Accessories');

-- Insert Products
INSERT INTO Products (ProductName, Description, Price, CategoryID) VALUES 
('MacBook Air', 'Apple Laptop with M2 Chip', 999.99, 1), 
('Samsung Galaxy S23', 'Samsung flagship smartphone', 799.99, 2), 
('iPad Pro', 'Apple tablet with M1 Chip', 1099.99, 3), 
('Wireless Earbuds', 'Noise-canceling Bluetooth earbuds', 149.99, 4);

--5.Retrieve gadgets along with their categories (Assuming a Categories Table)**

SELECT P.ProductName, C.CategoryName
FROM Products P
JOIN Categories C ON P.CategoryID = C.CategoryID;

--6.Calculate average order value for each customer**

SELECT C.CustomerID, C.FirstName, C.LastName, AVG(O.TotalAmount) AS AvgOrderValue
FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID
GROUP BY C.CustomerID, C.FirstName, C.LastName;

--7.Find the order with the highest total revenue**

SELECT TOP 1 O.OrderID, C.FirstName, C.LastName, O.TotalAmount
FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID
ORDER BY O.TotalAmount DESC;

--8.List products and how many times they have been ordered**

SELECT P.ProductName, COUNT(OD.OrderDetailID) AS OrderCount
FROM OrderDetails OD
JOIN Products P ON OD.ProductID = P.ProductID
GROUP BY P.ProductName;

--9.Find customers who purchased a specific product (User input parameter)**

DECLARE @ProductName VARCHAR(100) = 'Laptop';
SELECT DISTINCT C.CustomerID, C.FirstName, C.LastName, C.Email
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
JOIN OrderDetails OD ON O.OrderID = OD.OrderID
JOIN Products P ON OD.ProductID = P.ProductID
WHERE P.ProductName = @ProductName;

--9.Calculate total revenue for orders in a specific time range (User input)**

DECLARE @StartDate DATE = '2024-01-01';
DECLARE @EndDate DATE = '2024-12-31';

SELECT SUM(O.TotalAmount) AS TotalRevenue
FROM Orders O
WHERE O.OrderDate BETWEEN @StartDate AND @EndDate;

